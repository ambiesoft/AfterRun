<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DialogNotDisplayedWhenPidWait" xml:space="preserve">
    <value>プロセスと待つときは入力ダイアログを表示できません。</value>
  </data>
  <data name="DialogNotDisplayedWhenTwoExes" xml:space="preserve">
    <value>コマンドラインで指定した実行ファイルが2つ以上あるときは入力ダイアログを表示できません。</value>
  </data>
  <data name="DurationNoEntered" xml:space="preserve">
    <value>時間が入力されていません。</value>
  </data>
  <data name="ExeAndArgBothNoEntered" xml:space="preserve">
    <value>実行ファイルとコマンドラインの両方が入力されていません</value>
  </data>
  <data name="FailedToSaveIni" xml:space="preserve">
    <value>設定情報の保存に失敗しました。</value>
  </data>
  <data name="HelpString" xml:space="preserve">
    <value>Afterrun : 指定時間後にプログラムを実行します

例: afterrun -t SecToWait -exe EXE [-arg ARG]

-c : ウインドウをセンタリングします
-d : タイムアウトのとき起動しない
-m : ウインドウを最上位に表示します
-p : 終了を待つpid
-t : 街秒数を指定します。mを指定すると無限に待ちます。'2m'で２分、'1h'で１時間、'1:30:30'で１時間３０分３０秒、'2:30'で２分３０秒待ちます
-aws : AfterRunのウインドウステート、'normal' で通常のウインドウを表示、'minimized' で最小化されたウインドウを表示、 'maximized' で最大化されたウインドウを表示します
-ws : 起動されるプロセスのウインドウステート
-exe EXE : 実行ファイルを指定します
-arg ARG : 直前の実行ファイルのコマンドライン引数を指定します</value>
  </data>
  <data name="IntervalAlreadySet" xml:space="preserve">
    <value>インターバルは既に指定されています</value>
  </data>
  <data name="InvalidDurationFormat" xml:space="preserve">
    <value>無効な時間フォーマットです</value>
  </data>
  <data name="InvalidInterval" xml:space="preserve">
    <value>Invalid Interval</value>
  </data>
  <data name="InvalidProcessId" xml:space="preserve">
    <value>無効なプロセスIDです {0}</value>
  </data>
  <data name="InvalidWindowStyle" xml:space="preserve">
    <value>Invalid Window Style</value>
  </data>
  <data name="Launching" xml:space="preserve">
    <value>以下のプログラムが実行されます。</value>
  </data>
  <data name="MultipleInputs" xml:space="preserve">
    <value>多重入力</value>
  </data>
  <data name="MultipleIntervals" xml:space="preserve">
    <value>Multiple Interval Values</value>
  </data>
  <data name="NoArgumentForInterval" xml:space="preserve">
    <value>No Arugment for interval value</value>
  </data>
  <data name="NoArgumentForProcessId" xml:space="preserve">
    <value>プロセスIDが指定されていません</value>
  </data>
  <data name="NoArgumentForWindowStyle" xml:space="preserve">
    <value>No Argument for Window Style</value>
  </data>
  <data name="NoArguments" xml:space="preserve">
    <value>引数がありません</value>
  </data>
  <data name="NoArgumentSpecified" xml:space="preserve">
    <value>-arg引数が指定されていません</value>
  </data>
  <data name="NoExecutableSpecified" xml:space="preserve">
    <value>-exe引数が指定されていません</value>
  </data>
  <data name="PIDNotFound" xml:space="preserve">
    <value>プロセスID {0} が見つかりません</value>
  </data>
  <data name="SelectExecutable" xml:space="preserve">
    <value>実行ファイルを選択</value>
  </data>
  <data name="Shutdowning" xml:space="preserve">
    <value>シャットダウンします・・・</value>
  </data>
  <data name="T_AND_P_CANNOTSPECIFIED_AT_THE_SAME_TIME" xml:space="preserve">
    <value>'-t' と '-p' は同時に指定できません。</value>
  </data>
  <data name="T_OR_P_MUST_BE_SPECIFIED" xml:space="preserve">
    <value>'-t' か '-p' のどちらかを指定しなければなりません。</value>
  </data>
  <data name="UnknownOption" xml:space="preserve">
    <value>未知のオプション</value>
  </data>
  <data name="UseUrlEncodeToPassArg" xml:space="preserve">
    <value>-arg引数を渡すにはUrlエンコードを使ってください</value>
  </data>
</root>